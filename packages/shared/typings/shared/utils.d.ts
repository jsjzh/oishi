export declare const sleep: (time: number) => Promise<unknown>;
export declare const retryPromise: <T = any, D = any>(promise: (data: D) => Promise<T>, data: D, handleResp: (resp: T) => boolean, maxRetryCount?: number) => Promise<void>;
export declare const realType: {
    (obj: any): string;
    isNumber(x: any): boolean;
    isString(x: any): boolean;
    isBoolean(x: any): boolean;
    isObject(x: any): boolean;
    isNull(x: any): boolean;
    isUndefined(x: any): boolean;
    isArray(x: any): boolean;
    isFunction(x: any): boolean;
    isSymbol(x: any): boolean;
    isDate(x: any): boolean;
    isBigInt(x: any): boolean;
    isMap(x: any): boolean;
    isSet(x: any): boolean;
    isWeakMap(x: any): boolean;
    isWeakSet(x: any): boolean;
    isPromise(x: any): boolean;
    isAsyncFunction(x: any): boolean;
};
export declare const asyncEvery: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<boolean>) => Promise<boolean>;
export declare const asyncSome: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<boolean>) => Promise<boolean>;
export declare const asyncForEach: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<void>) => Promise<void>;
export declare const asyncMap: <T, P>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<P>) => Promise<P[]>;
export declare const asyncFind: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<boolean>) => Promise<T | undefined>;
export declare const asyncFindIndex: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<boolean>) => Promise<number | undefined>;
export declare const asyncFilter: <T>(arr: T[], callback: (value: T, index: number, array: T[]) => Promise<boolean>) => Promise<T[]>;
export declare const parseDataURI: (dataURI: string) => {
    mime: string | null;
    encode: string | null;
    code: string | null;
};
